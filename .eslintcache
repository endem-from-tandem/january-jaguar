[{"D:\\Projects\\react\\january-jaguar\\src\\index.tsx":"1","D:\\Projects\\react\\january-jaguar\\src\\app\\app.tsx":"2","D:\\Projects\\react\\january-jaguar\\src\\components\\navbar\\navbar.tsx":"3","D:\\Projects\\react\\january-jaguar\\src\\store.ts":"4","D:\\Projects\\react\\january-jaguar\\src\\reducers\\index.ts":"5","D:\\Projects\\react\\january-jaguar\\src\\material-ui\\themes.ts":"6","D:\\Projects\\react\\january-jaguar\\src\\app\\app-c.tsx":"7","D:\\Projects\\react\\january-jaguar\\src\\components\\navbar\\navbar-c.tsx":"8","D:\\Projects\\react\\january-jaguar\\src\\routes\\routes.tsx":"9","D:\\Projects\\react\\january-jaguar\\src\\pages\\home\\home.tsx":"10","D:\\Projects\\react\\january-jaguar\\src\\pages\\gallery\\gallery.tsx":"11"},{"size":464,"mtime":1611070350571,"results":"12","hashOfConfig":"13"},{"size":1493,"mtime":1612122370329,"results":"14","hashOfConfig":"13"},{"size":11622,"mtime":1611915506718,"results":"15","hashOfConfig":"13"},{"size":129,"mtime":1611053361995,"results":"16","hashOfConfig":"13"},{"size":441,"mtime":1611069848653,"results":"17","hashOfConfig":"13"},{"size":853,"mtime":1612123077389,"results":"18","hashOfConfig":"13"},{"size":318,"mtime":1611070047708,"results":"19","hashOfConfig":"13"},{"size":2352,"mtime":1611756543036,"results":"20","hashOfConfig":"13"},{"size":491,"mtime":1611936970100,"results":"21","hashOfConfig":"13"},{"size":4149,"mtime":1612004921700,"results":"22","hashOfConfig":"13"},{"size":5305,"mtime":1612123350341,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"egjmro",{"filePath":"27","messages":"28","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Projects\\react\\january-jaguar\\src\\index.tsx",[],["49","50"],"D:\\Projects\\react\\january-jaguar\\src\\app\\app.tsx",["51","52","53","54","55"],"D:\\Projects\\react\\january-jaguar\\src\\components\\navbar\\navbar.tsx",["56","57"],"import React, { useRef } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator'\r\n\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\r\n\r\nimport Button from '@material-ui/core/Button'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Box from '@material-ui/core/Box'\r\nimport Container from '@material-ui/core/Container'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport List from '@material-ui/core/List'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\n\r\n//Toolbar & Driver\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport Drawer from '@material-ui/core/Drawer'\r\n//Dialog\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport DialogContentText from '@material-ui/core/DialogContentText'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\n\r\n//Icons\r\nimport Logo from '../../img/logo.png'\r\nimport Menu from '@material-ui/icons/Menu'\r\nimport Brightness6Icon from '@material-ui/icons/Brightness6'\r\nimport CloseIcon from '@material-ui/icons/Close'\r\nimport Visibility from '@material-ui/icons/Visibility'\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff'\r\n\r\ninterface INavbar {\r\n  theme?: 'light' | 'dark'\r\n  changeThemeHandler?: any\r\n\r\n  setToggleActive?: any\r\n  toggleActive?: boolean\r\n  toggleActiveHandler?: any\r\n\r\n  showModalHandler?: any\r\n  open?: any\r\n  closeModalHandler?: any\r\n  openModalHandler?: any\r\n\r\n  formData?: any\r\n  formSubmitted?: any\r\n  formChangeHandler?: any\r\n  formSubmitHandler?: any\r\n\r\n  showPassword?: boolean\r\n  showPasswordHandler?: any\r\n}\r\n\r\nconst drawerWidth = 240\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    // Toolbar\r\n    toolBar: {\r\n      minHeight: 12,\r\n    },\r\n    button: {\r\n      fontSize: 14,\r\n      fontWeight: 'lighter',\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(1),\r\n    },\r\n    flexBox: {\r\n      flexGrow: 1,\r\n    },\r\n    // Drawer\r\n    drawer: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n      width: drawerWidth,\r\n    },\r\n    closeMenuButton: {\r\n      marginRight: 'auto',\r\n      marginLeft: 0,\r\n    },\r\n    // Dialog\r\n    // redefinition of MUI classes\r\n    DialogCustom: {\r\n      '& .MuiDialog-paperWidthXs': {\r\n        minWidth: '310px',\r\n      },\r\n    },\r\n    ThemeModalInput:\r\n      theme.palette.type === 'dark'\r\n        ? {\r\n            '& label.Mui-focused': { color: '#2196f3' },\r\n            '& .MuiInput-underline:after': {\r\n              borderBottomColor: '#2196f3',\r\n            },\r\n          }\r\n        : { '& label.Mui-focused': { color: 'primary' } },\r\n    ThemeModalTitle:\r\n      theme.palette.type === 'light'\r\n        ? {\r\n            color: theme.palette.primary.main,\r\n            padding: 2,\r\n          }\r\n        : { padding: 2 },\r\n    // redefinition of MUI tags\r\n    dialogForm: {\r\n      '& .MuiTextField-root': { width: '90%' },\r\n    },\r\n    dialogCloseButton: {\r\n      color: theme.palette.error.main,\r\n    },\r\n  })\r\n)\r\n\r\nconst Navbar: React.FC<INavbar> = ({\r\n  theme,\r\n  changeThemeHandler,\r\n  toggleActiveHandler,\r\n  toggleActive,\r\n  open,\r\n  openModalHandler,\r\n  closeModalHandler,\r\n  formData,\r\n  formChangeHandler,\r\n  formSubmitted,\r\n  formSubmitHandler,\r\n  showPassword,\r\n  showPasswordHandler,\r\n}) => {\r\n  const classes = useStyles()\r\n  const navs = ['MEDIA', 'some_two', 'with_large_text']\r\n\r\n  const drawer = (\r\n    <List>\r\n      {navs.map((nav, index) => (\r\n        <ListItem\r\n          button\r\n          component={Link}\r\n          to={`/${nav}`}\r\n          disabled={index > 0 ? true : false}\r\n          key={nav}\r\n        >\r\n          <ListItemText primary={nav} />\r\n        </ListItem>\r\n      ))}\r\n    </List>\r\n  )\r\n\r\n  const signInForm = useRef(null)\r\n\r\n  return (\r\n    <>\r\n      {/*TOOLBAR*/}\r\n      <AppBar position='fixed' color='primary'>\r\n        <Container disableGutters maxWidth='md'>\r\n          <Toolbar className={classes.toolBar}>\r\n            <Box display={{ xs: 'block', navbar: 'none' }}>\r\n              <IconButton\r\n                className={classes.menuButton}\r\n                edge='start'\r\n                color='inherit'\r\n                aria-label='app'\r\n                onClick={toggleActiveHandler}\r\n              >\r\n                <Menu />\r\n              </IconButton>\r\n            </Box>\r\n            <Button\r\n              className={classes.button}\r\n              component={Link}\r\n              color='inherit'\r\n              to='/'\r\n              startIcon={<Avatar variant='square' src={Logo} />}\r\n            >\r\n              Home\r\n            </Button>\r\n            <Box className={classes.flexBox} />\r\n            <Box display={{ xs: 'none', navbar: 'block' }}>\r\n              {navs.map((nav, index) => (\r\n                <Button\r\n                  disabled={index > 0 ? true : false}\r\n                  className={classes.button}\r\n                  component={Link}\r\n                  to={`${nav}`}\r\n                  size='large'\r\n                  color='inherit'\r\n                >\r\n                  {`${nav}`}\r\n                </Button>\r\n              ))}\r\n            </Box>\r\n            <Button\r\n              onClick={openModalHandler}\r\n              className={classes.button}\r\n              size='large'\r\n              color='inherit'\r\n            >\r\n              Sign In\r\n            </Button>\r\n            <IconButton\r\n              onClick={changeThemeHandler}\r\n              color='inherit'\r\n              aria-label='changeTheme'\r\n            >\r\n              <Brightness6Icon />\r\n            </IconButton>\r\n\r\n            {/*DIALOG*/}\r\n            <Dialog\r\n              className={classes.DialogCustom}\r\n              fullWidth\r\n              maxWidth='xs'\r\n              open={open}\r\n              onClose={closeModalHandler}\r\n              aria-labelledby='form-dialog-title'\r\n            >\r\n              <DialogTitle\r\n                className={classes.ThemeModalTitle}\r\n                id='form-dialog-title'\r\n              >\r\n                <Box\r\n                  display='flex'\r\n                  flexDirection='row'\r\n                  p={1}\r\n                  m={1}\r\n                  bgcolor='background.paper'\r\n                >\r\n                  <Box p={1}>\r\n                    <Typography variant='h4'>Sign in </Typography>\r\n                  </Box>\r\n                  <Box className={classes.flexBox} />\r\n                  <IconButton\r\n                    className={classes.dialogCloseButton}\r\n                    size='small'\r\n                    onClick={closeModalHandler}\r\n                  >\r\n                    <CloseIcon style={{ width: '50px' }} />\r\n                  </IconButton>\r\n                </Box>\r\n              </DialogTitle>\r\n\r\n              <DialogContent>\r\n                <>\r\n                  {/*<DialogContentText></DialogContentText>*/}\r\n                  {/*}\r\n                <TextField\r\n                  className={classes.ThemeModalInput}\r\n                  margin='dense'\r\n                  id='email'\r\n                  label='Email'\r\n                  type='email'\r\n                  fullWidth\r\n                />\r\n                <TextField\r\n                  className={classes.ThemeModalInput}\r\n                  margin='dense'\r\n                  id='password'\r\n                  label='Password'\r\n                  type='password'\r\n                  fullWidth\r\n                />\r\n                <Box mt={0.3} color='primary.main'>\r\n                  <Tooltip title='Go to the password recovery page?'>\r\n                    <Button size='small'>Forgot your password?</Button>\r\n                  </Tooltip>\r\n                </Box>\r\n              */}\r\n                </>\r\n                <ValidatorForm\r\n                  className={classes.dialogForm}\r\n                  ref={signInForm}\r\n                  onError={(errors) => console.log(errors)}\r\n                  onSubmit={formSubmitHandler}\r\n                >\r\n                  <TextValidator\r\n                    margin='dense'\r\n                    className={classes.ThemeModalInput}\r\n                    label='Email'\r\n                    onChange={formChangeHandler}\r\n                    name='email'\r\n                    value={formData.email}\r\n                    validators={['required', 'isEmail']}\r\n                    errorMessages={[\r\n                      'this field is required',\r\n                      'email is not valid',\r\n                    ]}\r\n                  />\r\n                  <TextValidator\r\n                    margin='dense'\r\n                    type={showPassword ? 'text' : 'password'}\r\n                    className={classes.ThemeModalInput}\r\n                    label='Password'\r\n                    onChange={formChangeHandler}\r\n                    name='password'\r\n                    value={formData.password}\r\n                    validators={['required']}\r\n                    errorMessages={['this field is required']}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <IconButton\r\n                          aria-label='toggle password visibility'\r\n                          onClick={showPasswordHandler}\r\n                        >\r\n                          {showPassword ? <Visibility /> : <VisibilityOff />}\r\n                        </IconButton>\r\n                      ),\r\n                    }}\r\n                  />\r\n                  <Box mt={2}>\r\n                    <Button\r\n                      color='primary'\r\n                      variant='contained'\r\n                      type='submit'\r\n                      disabled={formSubmitted}\r\n                    >\r\n                      Log In\r\n                    </Button>\r\n                    <Tooltip title='Go to the password recovery page?'>\r\n                      <Button disabled={formSubmitted}>\r\n                        Forgot your password?\r\n                      </Button>\r\n                    </Tooltip>\r\n                  </Box>\r\n                </ValidatorForm>\r\n              </DialogContent>\r\n              <DialogActions>\r\n                <Button\r\n                  onClick={closeModalHandler}\r\n                  variant='outlined'\r\n                  color='secondary'\r\n                >\r\n                  SIGN UP\r\n                </Button>\r\n              </DialogActions>\r\n            </Dialog>\r\n          </Toolbar>\r\n        </Container>\r\n      </AppBar>\r\n\r\n      {/*DRAWER*/}\r\n      {toggleActive ? (\r\n        <Box>\r\n          <nav className={classes.drawer}>\r\n            <Drawer\r\n              variant='temporary'\r\n              anchor='left'\r\n              open={toggleActive}\r\n              onClose={toggleActiveHandler}\r\n              classes={{\r\n                paper: classes.drawerPaper,\r\n              }}\r\n              ModalProps={{\r\n                keepMounted: true, // Better open performance on mobile.\r\n              }}\r\n            >\r\n              <IconButton\r\n                onClick={toggleActiveHandler}\r\n                className={classes.closeMenuButton}\r\n              >\r\n                <CloseIcon />\r\n              </IconButton>\r\n              {drawer}\r\n            </Drawer>\r\n          </nav>\r\n        </Box>\r\n      ) : null}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Navbar\r\n","D:\\Projects\\react\\january-jaguar\\src\\store.ts",[],"D:\\Projects\\react\\january-jaguar\\src\\reducers\\index.ts",[],"D:\\Projects\\react\\january-jaguar\\src\\material-ui\\themes.ts",[],"D:\\Projects\\react\\january-jaguar\\src\\app\\app-c.tsx",[],"D:\\Projects\\react\\january-jaguar\\src\\components\\navbar\\navbar-c.tsx",[],"D:\\Projects\\react\\january-jaguar\\src\\routes\\routes.tsx",[],"D:\\Projects\\react\\january-jaguar\\src\\pages\\home\\home.tsx",["58","59","60"],"import React from 'react'\r\nimport {\r\n  useTheme,\r\n  makeStyles,\r\n  createStyles,\r\n  Typography,\r\n  Button,\r\n  Box,\r\n  Hidden,\r\n} from '@material-ui/core'\r\n\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardActionArea from '@material-ui/core/CardActionArea'\r\nimport CardActions from '@material-ui/core/CardActions'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport CardMedia from '@material-ui/core/CardMedia'\r\n\r\nimport jagu from '../../img/jagu.jpg'\r\n\r\nconst Home: React.FC = () => {\r\n  const useStyles = makeStyles((theme) =>\r\n    createStyles({\r\n      card: {\r\n        marginTop: theme.spacing(1),\r\n      },\r\n      cardMedia: {\r\n        height: 200,\r\n      },\r\n    })\r\n  )\r\n  const classes = useStyles()\r\n  const themeObject = useTheme()\r\n  const f = useMediaQuery((theme: any) => theme.breakpoints.up('navbar'))\r\n  return (\r\n    <>\r\n      <Typography variant={f ? 'h3' : 'h4'} color='secondary'>\r\n        January Jaguar\r\n      </Typography>\r\n      <Card className={classes.card}>\r\n        <CardMedia\r\n          className={classes.cardMedia}\r\n          image={jagu}\r\n          title='Contemplative Reptile'\r\n        />\r\n        <CardContent>\r\n          <Typography gutterBottom variant='h5' component='h2'>\r\n            \"Ягуар\" и \"пантера\" - одно и тоже.\r\n          </Typography>\r\n          <Typography variant='body2' color='textSecondary' component='p'>\r\n            Люди называют чёрными пантерами самых разных животных, зачастую даже\r\n            не догадываясь, что они принадлежат к разным видам. Всё, что их\r\n            объединяет — это окраска, тёмная или чёрная. Так как в природе\r\n            чёрные пантеры встречаются редко, неудивительно, что у многих\r\n            народов, которым доводилось с ними сталкиваться, возник\r\n            мифологический образ этого животного. Во многих культурах пантер\r\n            наделяют сверхъестественными силами и относятся к ним с почтением и\r\n            опаской.\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n      <Box p={2} mt={2} color='info.contrastText' bgcolor='info.main'>\r\n        <Typography>\r\n          Сайт является практикой освоения и демонстрацией навыка Material UI.\r\n          Была цель освоить основные компоненты и функции данного UI-Kit\r\n          (темизация, кастомизация и адаптивность компонентов). Так же уделил\r\n          внимание typescript, react-hooks и структуре приложения.\r\n        </Typography>\r\n      </Box>\r\n\r\n      <Box p={2} mt={1} bgcolor='primary.light' color='primary.contrastText'>\r\n        <Typography variant='h6'>Additional packages:</Typography>\r\n        <Typography variant='overline'>\r\n          reat-material-ui-form-validator\r\n          <br />\r\n          material-auto-rotating-carousel\r\n          <br />\r\n          notistack\r\n        </Typography>\r\n      </Box>\r\n\r\n      <Hidden only={['xs', 'sm']}>\r\n        <Box mt={0.3}>\r\n          {/* use color from default theme object in Typography by export theme object */}\r\n          <Typography\r\n            style={{ color: themeObject.palette.grey[500] }}\r\n            variant='subtitle2'\r\n          >\r\n            Обрати внимание на мобильную версию!\r\n          </Typography>\r\n        </Box>\r\n      </Hidden>\r\n\r\n      {/*\r\n<Box mt={2}>\r\n  <Button variant='contained' color='primary'>\r\n    add\r\n  </Button>\r\n  <Button\r\n    style={{ backgroundColor: '#f44336', color: 'white' }}\r\n    variant='contained'\r\n  >\r\n    delete\r\n  </Button>\r\n</Box>\r\n*/}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","D:\\Projects\\react\\january-jaguar\\src\\pages\\gallery\\gallery.tsx",["61","62"],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":14,"column":3,"nodeType":"69","messageId":"70","endLine":14,"endColumn":13},{"ruleId":"67","severity":1,"message":"71","line":15,"column":3,"nodeType":"69","messageId":"70","endLine":15,"endColumn":9},{"ruleId":"67","severity":1,"message":"72","line":16,"column":3,"nodeType":"69","messageId":"70","endLine":16,"endColumn":6},{"ruleId":"67","severity":1,"message":"73","line":18,"column":3,"nodeType":"69","messageId":"70","endLine":18,"endColumn":9},{"ruleId":"67","severity":1,"message":"74","line":37,"column":9,"nodeType":"69","messageId":"70","endLine":37,"endColumn":20},{"ruleId":"67","severity":1,"message":"75","line":27,"column":8,"nodeType":"69","messageId":"70","endLine":27,"endColumn":25},{"ruleId":"67","severity":1,"message":"76","line":28,"column":8,"nodeType":"69","messageId":"70","endLine":28,"endColumn":17},{"ruleId":"67","severity":1,"message":"71","line":7,"column":3,"nodeType":"69","messageId":"70","endLine":7,"endColumn":9},{"ruleId":"67","severity":1,"message":"77","line":14,"column":8,"nodeType":"69","messageId":"70","endLine":14,"endColumn":22},{"ruleId":"67","severity":1,"message":"78","line":15,"column":8,"nodeType":"69","messageId":"70","endLine":15,"endColumn":19},{"ruleId":"67","severity":1,"message":"72","line":3,"column":46,"nodeType":"69","messageId":"70","endLine":3,"endColumn":49},{"ruleId":"67","severity":1,"message":"79","line":7,"column":8,"nodeType":"69","messageId":"70","endLine":7,"endColumn":18},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"@typescript-eslint/no-unused-vars","'Typography' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'Box' is defined but never used.","'Hidden' is defined but never used.","'themeObject' is assigned a value but never used.","'DialogContentText' is defined but never used.","'TextField' is defined but never used.","'CardActionArea' is defined but never used.","'CardActions' is defined but never used.","'IconButton' is defined but never used.","no-global-assign","no-unsafe-negation"]